# -*- coding: utf-8 -*-
"""
Created on Fri Jan 18 22:08:18 2019

@author: Lenovo
"""


sections = [{'h1': '1.0 Overview', 'pages': [1], 'paragraphs':[['The purpose of this document is to provide the general architectural and design approach to the project. ']], 'sub-sections': []},
            {'h1': '2.0 Hardware Architecture', 'pages': [1], 'paragraphs':[['The application was deployed on an IaaS infrastructure using Amazon Web Services (AWS) as a provider.',' As you can see in Figure 1, we used two virtual private cloud’s (VPCs).',' The application VPC hosts the Docker container of the prototype application.',' The management VPC contains the continuous integration and deployment system. ']], 'sub-sections': []},
            {'h1': '3.0 Software Architecture', 'pages': [1,2,3], 'paragraphs':[['Flexibility and testability are key features of an agile software architecture. ','It should be easy to add new features, refactor, and test the software. '],['Figure 2 below show how the software is divided into four layers: external, infrastructure, application, and entities. ','The application API sits between the infrastructure and application layers and provides a public contract for the layers to communicate.',' To achieve flexibility and have low coupling it is important that the infrastructure and application be isolated and that both should be designed such that neither will know about the internals of the other. ']], 'sub-sections': [
                    {'h2': '3.1 External', 'pages': [1], 'paragraphs':[['The External Layer covers things like the database or cloud services that are not directly a part of the application. ']], 'sub-sections': []},
                    {'h2': '3.2 Infrastructure', 'pages': [2], 'paragraphs':[['Application frameworks reside in the infrastructure layer.',' For example, we use Spring MVC to provide RESTful web services. ','This layer is kept as simple as possible.',' We want it to be possible to easily swap out the infrastructure layer. ','If we switch databases it should only be required to add a new database repository. ','The application layer should remain unchanged. ']], 'sub-sections': []},
                    {'h2': '3.3 Application', 'pages': [2], 'paragraphs':[['The application layer is the “conductor”.',' It implements the use cases and business rules of the software.',' To achieve this it manipulates the domain model in the entity layer.  '],['For example, if a line item were added to an order it would add the line item to the order entity and then ask the order repository to store the new line item.',' The application layer doesn’t concern itself with where the entity is actually stored. ','It might be in a database, an XML file, or in memory. ','It is only important that the repository fulfils the contract as specified by the application API. ']], 'sub-sections': []},
                    {'h2': '3.4 Entities', 'pages': [3], 'paragraphs':[['The entities are objects which store the data manipulated in the Application Layer. ']], 'sub-sections': []},
                    {'h2': '3.5 Request Lifecycle', 'pages': [3], 'paragraphs':[['Figure 3, provides an example of how data passes through the various software layers. '],['1. Browser sends a request to the web server which is processed by a Spring MVC controller. ','2. Spring MVC executes a use case in the application layer.',' 3. The use case invokes the service gateway interface to request data. ','4. The service gateway makes a request to the external REST API. ','5. The external REST service returns a JSON representation of the data.',' 6. The JSON response is unmarshalled to a data transfer object.',' 7. A domain entity is created from the data transfer object.',' 8. The domain entity is populated from the data transfer object.',' 9. The controller is informed of the result. ','10. The controller returns a JSON response to the client. ']], 'sub-sections': []}]},
            {'h1': '4.0 REST Services', 'pages': [4], 'paragraphs':[['The application consumes the Open FDA Labelling API and the Adverse Events API. '],['The application provides three APIs which return JSON:  Drug API - Information about a particular drug  Event API - Makes several calls to the OpenFDA API to remix it to provide a summary of adverse events Suggestion API - Given the partial name of a drug, returns suggestions for autocomplete. '],['Please refer to the Swagger documentation for further details about these APIs. ']], 'sub-sections': []},
            {'h1': '5.0 Testing', 'pages': [4,5,6,7], 'paragraphs':[['Testing ensures that the software meets the acceptance criteria defined in the user story. ','Automated tests reduce the time to fully test the software by making it possible to fully re-test the software on demand. '],['Bugs can be introduced into software each time the code it changed.','  However, automated testing allows us to run the full suite of tests each time the code is updated. ',' This is critical to successful agile development, because in order to evolve the architecture changes must be made.  ','Automated tests make the code easier to refactor to meet new requirements.',' It is also possible to aggressively refactor the software and ensure it still works.']], 'sub-sections': [
                    {'h2': '5.1 Test Driven Development', 'pages': [4,5], 'paragraphs':[['Test driven development is software development technique that improves code coverage.',' A test is written, which fails because there is no code to back it. ','Then the minimum amount of code is written to make the test pass.',' If the test is written after the code it is less obvious if the test covers all of the code. '],['Our test driven development process, sometimes referred to as the "red-green-refactor" loop is show in Figure 4 below.',' The test is written (red), and then code is written to make the test pass (green).',' The code written during the green cycle doesnt need to be well-factored: it only needs to pass the test.',' After the test passes the code is refactored. ','Then the cycle continues. ']], 'sub-sections': []},
                    {'h2': '5.2 Test Tools', 'pages': [5], 'paragraphs':[['JUnit - A Java based unit test framework. ','Serenity BDD - a automated web integration test tool. ','It drives a web browser to interact with the website as a user would. ','Jenkins reports  SonarQube reports ']], 'sub-sections': []},
                    {'h2': '5.3 Test Coverage', 'pages': [5,6], 'paragraphs':[['Jenkins and SonarQube generate reports on the number of unit tests, test status (pass/fail), and test code coverage. ',' The results from these tests are illustrated in Figure 5 and Figure 6.']], 'sub-sections': []},
                    {'h2': '5.4 Testability', 'pages': [6,7], 'paragraphs':[['This software was designed to be easy to test, as illustrated in Figure 7. ','The core application interacts with the infrastructure layer via Java interfaces. ','The infrastructure can be swapped out with test objects that emulate the expected behavior of the system. ']], 'sub-sections': []},
                    {'h2': '5.5 Infrastructure Testing', 'pages': [7], 'paragraphs':[['Ideally the infrastructure layer is simple and thin, so it’s obvious what it does and doesn’t require testing, but when this isn’t the case the public API can be stubbed.',' For example, we can return a “not found” response from the application layer and verify the controller returns a 404 HTTP response code.','  Our test process is demonstrated in Figure 8 below. ']], 'sub-sections': []}]},
            {'h1': '6.0 Open Source Technology Stack', 'pages': [8], 'paragraphs':[['1. nginx 1.0.15 - Light-weight HTTP server/proxy.  ','2. Spring Boot 1.2.4 - Standalone Java servlet container. ',' 3. AngularJS 1.3.16 - Front-end MVC framework to create a single page application.   ','4. Twitter Bootstrap 3.3.5 - A popular CSS framework. ','5. Docker 1.5.0 -  Operating system level container-based virtualization.',' 6. OpenJDK 1.8.0 - Java runtime environment and development kit.'],['Additional technologies are listed in LICENSES.md on GitHub.']], 'sub-sections': []},
            {'h1': '7.0 Continuous Integration and Deployment', 'pages': [8,9], 'paragraphs':[['As Illustrated in Figure 10, Jenkins performs builds automatically after source code check-ins to GitHub.',' A notification is sent to the team chat room.',' If the unit tests pass, then a post-build task creates a Docker image, deploys it to the application server, and starts up the new container. '],['Another Jenkins job updates the projects Maven site which includes several reports.',' The Jenkins reports and SonarQube reports are also updated. ']], 'sub-sections': []},
            {'h1': '8.0 Configuration Management', 'pages': [9], 'paragraphs':[['GitHub is used for version control of Java and Puppet source code, and documentation.  ','Puppet modules are used to manage the state of servers. ']], 'sub-sections': []},
            {'h1': '9.0 Documentation', 'pages': [9], 'paragraphs':[['Documentation is automatically generated from the source code where possible. ','Javadocs - Java API documentation.',' Swagger - REST API documentation.']], 'sub-sections': []}]